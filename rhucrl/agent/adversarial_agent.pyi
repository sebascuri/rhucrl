"""Python Script Template."""
from abc import ABCMeta
from typing import Any, List, Optional, Type, TypeVar

from rllib.agent import AbstractAgent
from rllib.dataset.datatypes import Observation
from rllib.model import AbstractModel
from torch import Tensor

from rhucrl.environment import AdversarialEnv

T = TypeVar("T", bound="AdversarialAgent")

class AdversarialAgent(AbstractAgent, metaclass=ABCMeta):
    agents: List[AbstractAgent]
    protagonists: List[AbstractAgent]
    antagonists: List[AbstractAgent]
    protagonist_idx: int
    antagonist_idx: int
    def __init__(
        self,
        protagonist_agent: AbstractAgent,
        antagonist_agent: AbstractAgent,
        n_protagonist: int = ...,
        n_antagonist: int = ...,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    @property
    def protagonist(self) -> AbstractAgent: ...
    @property
    def antagonist(self) -> AbstractAgent: ...
    def send_observations(
        self, protagonist_observation: Observation, antagonist_observation: Observation
    ) -> None: ...
    def __str__(self) -> str: ...
    def start_episode(self) -> None: ...
    def end_episode(self) -> None: ...
    def end_interaction(self) -> None: ...
    def set_goal(self, goal: Optional[Tensor]) -> None: ...
    def train(self, val: bool = True) -> None: ...
    def eval(self, val: bool = True) -> None: ...
    def train_only_antagonist(self) -> None: ...
    def train_only_protagonist(self) -> None: ...
    def only_protagonist(self, val: bool = True) -> None: ...
    def save(self, filename: str, directory: Optional[str] = ...) -> None: ...
    def load_protagonist(self, path: str, idx: int = ...) -> None: ...
    def load_antagonist(self, path: str, idx: int = ...) -> None: ...
