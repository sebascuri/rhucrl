"""Python Script Template."""
from abc import ABCMeta
from typing import Any, List, Optional

from rllib.agent import AbstractAgent
from rllib.dataset.datatypes import Observation
from torch import Tensor

class AdversarialAgent(AbstractAgent, metaclass=ABCMeta):
    protagonist_agent: AbstractAgent
    antagonist_agent: AbstractAgent
    weak_antagonist_agent: Optional[AbstractAgent]
    agents: List[AbstractAgent]
    antagonist_agents: List[AbstractAgent]
    def __init__(
        self,
        protagonist_agent: AbstractAgent,
        antagonist_agent: AbstractAgent,
        weak_antagonist_agent: Optional[AbstractAgent] = ...,
        tensorboard: bool = ...,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    def send_observations(
        self, protagonist_observation: Observation, antagonist_observation: Observation
    ) -> None: ...
    def __str__(self) -> str: ...
    def start_episode(self) -> None: ...
    def end_episode(self) -> None: ...
    def end_interaction(self) -> None: ...
    def set_goal(self, goal: Optional[Tensor]) -> None: ...
    def train(self, val: bool = True) -> None: ...
    def eval(self, val: bool = True) -> None: ...
    def train_only_antagonist(self) -> None: ...
    def train_only_protagonist(self) -> None: ...
    def only_protagonist(self, val: bool = True) -> None: ...
    def save(self, filename: str, directory: Optional[str] = ...): ...
    def load_protagonist(self, path: str) -> None: ...
    def load_antagonist(self, path: str) -> None: ...
    def load_weak_antagonist(self, path: str) -> None: ...
