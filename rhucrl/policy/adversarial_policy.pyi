"""Python Script Template."""
from typing import Any, Tuple

from rllib.dataset.datatypes import TupleDistribution
from rllib.policy import AbstractPolicy
from torch import Tensor

class AdversarialPolicy(AbstractPolicy):
    """Given a protagonist and an antagonist policy, combine to give a joint policy."""

    _protagonist_policy: AbstractPolicy
    _antagonist_policy: AbstractPolicy
    _hallucination_policy: AbstractPolicy
    def __init__(
        self,
        protagonist_policy: AbstractPolicy,
        antagonist_policy: AbstractPolicy,
        protagonist: bool = ...,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    @property
    def protagonist(self) -> bool: ...
    @protagonist.setter
    def protagonist(self, new_value: bool) -> None: ...
    @property
    def antagonist(self) -> bool: ...
    @antagonist.setter
    def antagonist(self, new_value: bool) -> None: ...
    @property
    def protagonist_policy(self) -> AbstractPolicy: ...
    def set_protagonist_policy(self, new_policy: AbstractPolicy) -> None: ...
    @property
    def antagonist_policy(self) -> AbstractPolicy: ...
    def set_antagonist_policy(self, new_policy: AbstractPolicy) -> None: ...
    @property
    def hallucination_policy(self) -> AbstractPolicy: ...
    def set_hallucination_policy(self, new_policy: AbstractPolicy) -> None: ...
    def stack_policies(
        self, means: Tuple[Tensor], stds: Tuple[Tensor]
    ) -> TupleDistribution: ...
    def forward(self, *args: Tensor, **kwargs: Any) -> TupleDistribution: ...
